(()=>{"use strict";var e={};async function s(e){if(console.log("Running TTS setup diagnostics..."),!e)return{isValid:!1,message:"No API key provided",details:"Please enter your Google Cloud API key in the extension settings."};if(!/^[A-Za-z0-9_-]{20,}$/.test(e))return{isValid:!1,message:"API key format appears invalid",details:"Google Cloud API keys are typically ~40 characters long and only contain letters, numbers, underscores, and hyphens."};try{const s=`https://texttospeech.googleapis.com/v1/voices?key=${e}`;console.log("Testing API key with voices endpoint...");const o=await fetch(s);if(console.log("API test response status:",o.status),!o.ok){let e="";if(403===o.status)return e="This could indicate:\n1. The API key is invalid\n2. The Text-to-Speech API is not enabled in your Google Cloud Console\n3. The API key has restrictions that prevent it from being used with this extension\n\nPlease check these settings in your Google Cloud Console.",{isValid:!1,message:"API key authentication failed (403 Forbidden)",details:e};if(404===o.status)return{isValid:!1,message:"API endpoint not found (404)",details:"The Text-to-Speech API URL might have changed or the service is temporarily unavailable."};if(429===o.status)return{isValid:!1,message:"API quota exceeded (429)",details:"You have reached the usage limit for your Google Cloud TTS API. Check your quota in the Google Cloud Console."};try{const e=await o.json();return{isValid:!1,message:`API error (${o.status})`,details:`Error message: ${e.error?.message||"Unknown error"}`}}catch(e){return{isValid:!1,message:`API error (${o.status})`,details:`Status: ${o.statusText}`}}}try{const e=await o.json();return e.voices&&Array.isArray(e.voices)&&0!==e.voices.length?{isValid:!0,message:`API connection successful (${e.voices.length} voices available)`,details:"Your Google Cloud TTS API setup is valid and working correctly."}:{isValid:!1,message:"No voices returned from API",details:"The API returned successfully but no voices were found. This might indicate an issue with your Google Cloud project configuration."}}catch(e){return{isValid:!1,message:"Invalid response from API",details:"The API returned a response, but it was not in the expected format. This might indicate an issue with the Google Cloud TTS API."}}}catch(e){return{isValid:!1,message:"Network error",details:`Error connecting to Google Cloud TTS API: ${e.message}`}}}async function o(e,s){const o=`https://texttospeech.googleapis.com/v1/text:synthesize?key=${e}`;console.log(`Testing TTS synthesis with voice: ${s}`);const t={input:{text:"This is a test of the Text-to-Speech API."},voice:{languageCode:s.split("-")[0],name:s},audioConfig:{audioEncoding:"MP3",speakingRate:1}};try{const e=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){let s=`HTTP error: ${e.status} ${e.statusText}`;try{const o=await e.json();s=`Google TTS API error: ${o.error?.message||e.statusText}`}catch(e){}return{success:!1,message:s}}const s=await e.json();return s.audioContent?{success:!0,message:"TTS synthesis successful",audioData:s.audioContent}:{success:!1,message:"No audio content received from Google TTS API"}}catch(e){return{success:!1,message:`Error during TTS synthesis: ${e.message}`}}}function t(){return""!==(new Audio).canPlayType("audio/mp3")?"undefined"==typeof HTMLAudioElement?{supported:!1,message:"Audio API not supported",details:"Your browser does not support the HTML Audio API. Try using a different browser."}:{supported:!0,message:"Audio support validated",details:"Your browser supports the audio formats required for TTS playback."}:{supported:!1,message:"MP3 audio format not supported",details:"Your browser does not support the MP3 format used by Google TTS. Try using a different browser."}}function a(e){return new Promise((s=>{try{const o=new Audio(`data:audio/mp3;base64,${e}`);o.onplay=()=>{console.log("Audio playback test: Playback started successfully")},o.onended=()=>{console.log("Audio playback test: Playback completed successfully"),s(!0)},o.onerror=e=>{console.error("Audio playback test: Playback failed",e),console.error("Audio error code:",o.error?.code),s(!1)},setTimeout((()=>{o.play().catch((e=>{console.error("Audio playback test: play() method failed",e),s(!1)}))}),100)}catch(e){console.error("Audio playback test: Error creating audio element",e),s(!1)}}))}e.d=(s,o)=>{for(var t in o)e.o(o,t)&&!e.o(s,t)&&Object.defineProperty(s,t,{enumerable:!0,get:o[t]})},e.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s),console.log("TTS Diagnostics module loaded"),"undefined"!=typeof window&&(window.TTSDiagnostics={diagnoseTTSSetup:s,testTTSSynthesis:o,validateAudioSupport:t,testAudioPlayback:a,runFullDiagnostics:async function(e,i){const r=[],n={apiValid:!1,audioSupported:!1,synthesisWorks:!1,playbackWorks:!1,overallStatus:"error",messages:r},u=await s(e);n.apiValid=u.isValid,r.push(`API Check: ${u.message}`),u.details&&r.push(u.details);const l=t();if(n.audioSupported=l.supported,r.push(`Audio Support: ${l.message}`),l.details&&r.push(l.details),u.isValid&&i){const s=await o(e,i);if(n.synthesisWorks=s.success,r.push(`Synthesis Test: ${s.message}`),s.success&&s.audioData){const e=await a(s.audioData);n.playbackWorks=e,r.push("Playback Test: "+(e?"Successful":"Failed"))}}return n.apiValid&&n.audioSupported&&n.synthesisWorks&&n.playbackWorks?n.overallStatus="success":n.apiValid&&n.audioSupported?n.overallStatus="warning":n.overallStatus="error",n}})})();